(include! "syscalls.sasm")

start
    (jal x1 malloc-init)

    (lw x10 x2)
    (addi x11 x0 2)
    (bne x10 x11 error-argc)

    ;; Open input file
    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 AT_FDCWD)
    ;; argv[1]
    (ld x11 (+ x2 16))
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)

    ;; Read input file to buffer
    ;; mmap(NULL, 64k, PROT_READ, MAP_PRIVATE, fd, 0)
    (add x14 x0 x10)
    (add x10 x0 x0)
    (addi x11 x0 1)
    (slli x11 x11 25)
    (addi x12 x0 3)
    (addi x13 x0 2)
    (add x15 x0 x0)
    (addi x17 x0 SYS_MMAP)
    (ecall)
    (blt x10 x0 error-read-input)
    (beq x10 x0 error-read-input)

    (add x31 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    (add x10 x0 x31)
    (subi x2 x2 8)
    (sd x2 x10)

    ;(jal x1 p1)

    (ld x10 x2)
    (addi x2 x2 8)

    (jal x1 p2)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 SYS_EXIT)
    (ecall)

    p2
        (subi x2 x2 16)
        (sd x2 x10)
        (sd (+ x2 8) x1)

        (addi x10 x0 1)
        (slli x10 x10 20)
        (jal x1 malloc)
        (add x22 x0 x10)
        (add x23 x0 x10)

        (ld x10 x2)
        (ld x11 x2)
        (add x20 x0 x10)
        p2-width-loop
            (lb x5 x20)
            (addi x20 x20 1)
            (subi x5 x5 #'\n')
            (bne x5 x0 p2-width-loop)
        (sub x27 x20 x10)
        (add x20 x0 x10)
        p2-start-loop
            (lb x5 x20)
            (addi x20 x20 1)
            (subi x5 x5 #'S')
            (bne x5 x0 p2-start-loop)
        (subi x20 x20 1)

        (sub x31 x20 x11)
        (div x30 x31 x27)
        (rem x31 x31 x27)
        (sd x23 x31)
        (sd (+ x23 8) x30)
        (addi x23 x23 16)

        (addi x26 x0 1)
        (add x25 x0 x20)
        ;; Left
        (subi x10 x20 1)
        (lb x5 x10)
        (subi x6 x5 #'-')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'L')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'F')
        (beq x6 x0 p2-go)
        ;; Right
        (addi x10 x20 1)
        (lb x5 x10)
        (subi x6 x5 #'-')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'J')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'7')
        (beq x6 x0 p2-go)
        ;; Up
        (sub x10 x20 x27)
        (lb x5 x10)
        (subi x6 x5 #'|')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'F')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'7')
        (beq x6 x0 p2-go)
        ;; Down
        (add x10 x20 x27)
        (lb x5 x10)
        (subi x6 x5 #'|')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'J')
        (beq x6 x0 p2-go)
        (subi x6 x5 #'L')
        (beq x6 x0 p2-go)
        ;; error
        (jalr x0 x10)

        p2-go
            (beq x10 x20 p2-area)
            (addi x26 x26 1)
            (sub x31 x10 x11)
            (div x30 x31 x27)
            (rem x31 x31 x27)
            (sd x23 x31)
            (sd (+ x23 8) x30)
            (addi x23 x23 16)
            (lb x5 x10)
            (subi x6 x5 #'-')
            (beq x6 x0 p2-LR)
            (subi x6 x5 #'|')
            (beq x6 x0 p2-UD)
            (subi x6 x5 #'J')
            (beq x6 x0 p2-LU)
            (subi x6 x5 #'7')
            (beq x6 x0 p2-LD)
            (subi x6 x5 #'F')
            (beq x6 x0 p2-DR)
            (subi x6 x5 #'L')
            (beq x6 x0 p2-UR)
            ;; error
            (jalr x0 x10)
        p2-LR
            (subi x10 x10 1)
            (bne x10 x25 p2-LR-R)
            (addi x25 x10 1)
            (addi x10 x10 2)
            (jal x0 p2-go)
        p2-LR-R
            (addi x25 x10 1)
            (jal x0 p2-go)

        p2-UD
            (sub x10 x10 x27)
            (bne x10 x25 p2-UD-U)
            (add x10 x10 x27)
            (add x25 x0 x10)
            (add x10 x10 x27)
            (jal x0 p2-go)
        p2-UD-U
            (add x25 x10 x27)
            (jal x0 p2-go)

        p2-LU
            (subi x10 x10 1)
            (bne x10 x25 p2-LU-L)
            (addi x10 x10 1)
            (add x25 x0 x10)
            (sub x10 x10 x27)
            (jal x0 p2-go)
        p2-LU-L
            (addi x25 x10 1)
            (jal x0 p2-go)

        p2-LD
            (subi x10 x10 1)
            (bne x10 x25 p2-LU-L)
            (addi x10 x10 1)
            (add x25 x0 x10)
            (add x10 x10 x27)
            (jal x0 p2-go)
        p2-LD-L
            (addi x25 x10 1)
            (jal x0 p2-go)

        p2-DR
            (addi x10 x10 1)
            (bne x10 x25 p2-DR-R)
            (subi x10 x10 1)
            (add x25 x0 x10)
            (add x10 x10 x27)
            (jal x0 p2-go)
        p2-DR-R
            (subi x25 x10 1)
            (jal x0 p2-go)

        p2-UR
            (addi x10 x10 1)
            (bne x10 x25 p2-DR-R)
            (subi x10 x10 1)
            (add x25 x0 x10)
            (sub x10 x10 x27)
            (jal x0 p2-go)
        p2-UR-R
            (subi x25 x10 1)
            (jal x0 p2-go)

    p2-area
        (add x10 x0 x22)
        (addi x11 x22 16)
        (add x12 x0 x0)
    p2-area-loop
        (ld x28 x10)
        (ld x29 (+ x10 8))
        (beq x11 x23 p2-area-last)
        (ld x30 x11)
        (ld x31 (+ x11 8))
        (addi x10 x10 16)
        (addi x11 x11 16)
        (mul x28 x28 x31)
        (mul x29 x29 x30)
        (sub x28 x28 x29)
        (add x12 x12 x28)
        (jal x0 p2-area-loop)
    p2-area-last
        (ld x30 x22)
        (ld x31 (+ x22 8))
        (mul x28 x28 x31)
        (mul x29 x29 x30)
        (sub x28 x28 x29)
        (add x12 x12 x28)
        (bge x12 x0 p2-done)
        (sub x12 x0 x12)

    p2-done
        (sub x10 x12 x26)
        (srai x10 x10 1)
        (addi x10 x10 1)
        (jal x1 write-int)
        (add x10 x0 x22)
        (jal x1 malloc)
        (ld x1 (+ x2 8))
        (addi x2 x2 16)
        (jalr x0 x1)

    p1
        (add x20 x0 x10)
        p1-width-loop
            (lb x5 x20)
            (addi x20 x20 1)
            (subi x5 x5 #'\n')
            (bne x5 x0 p1-width-loop)
        (sub x27 x20 x10)
        (add x20 x0 x10)
        p1-start-loop
            (lb x5 x20)
            (addi x20 x20 1)
            (subi x5 x5 #'S')
            (bne x5 x0 p1-start-loop)
        (subi x20 x20 1)
        (add x25 x0 x20)
        (addi x26 x0 1)
        ;; Left
        (subi x10 x20 1)
        (lb x5 x10)
        (subi x6 x5 #'-')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'L')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'F')
        (beq x6 x0 p1-go)
        ;; Right
        (addi x10 x20 1)
        (lb x5 x10)
        (subi x6 x5 #'-')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'J')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'7')
        (beq x6 x0 p1-go)
        ;; Up
        (sub x10 x20 x27)
        (lb x5 x10)
        (subi x6 x5 #'|')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'F')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'7')
        (beq x6 x0 p1-go)
        ;; Down
        (add x10 x20 x27)
        (lb x5 x10)
        (subi x6 x5 #'|')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'J')
        (beq x6 x0 p1-go)
        (subi x6 x5 #'L')
        (beq x6 x0 p1-go)
        ;; error
        (jalr x0 x10)

        p1-go
            (beq x10 x20 p1-done)
            (addi x26 x26 1)
            (lb x5 x10)
            (subi x6 x5 #'-')
            (beq x6 x0 p1-LR)
            (subi x6 x5 #'|')
            (beq x6 x0 p1-UD)
            (subi x6 x5 #'J')
            (beq x6 x0 p1-LU)
            (subi x6 x5 #'7')
            (beq x6 x0 p1-LD)
            (subi x6 x5 #'F')
            (beq x6 x0 p1-DR)
            (subi x6 x5 #'L')
            (beq x6 x0 p1-UR)
            ;; error
            (jalr x0 x10)
        p1-LR
            (subi x10 x10 1)
            (bne x10 x25 p1-LR-R)
            (addi x25 x10 1)
            (addi x10 x10 2)
            (jal x0 p1-go)
        p1-LR-R
            (addi x25 x10 1)
            (jal x0 p1-go)

        p1-UD
            (sub x10 x10 x27)
            (bne x10 x25 p1-UD-U)
            (add x10 x10 x27)
            (add x25 x0 x10)
            (add x10 x10 x27)
            (jal x0 p1-go)
        p1-UD-U
            (add x25 x10 x27)
            (jal x0 p1-go)

        p1-LU
            (subi x10 x10 1)
            (bne x10 x25 p1-LU-L)
            (addi x10 x10 1)
            (add x25 x0 x10)
            (sub x10 x10 x27)
            (jal x0 p1-go)
        p1-LU-L
            (addi x25 x10 1)
            (jal x0 p1-go)

        p1-LD
            (subi x10 x10 1)
            (bne x10 x25 p1-LU-L)
            (addi x10 x10 1)
            (add x25 x0 x10)
            (add x10 x10 x27)
            (jal x0 p1-go)
        p1-LD-L
            (addi x25 x10 1)
            (jal x0 p1-go)

        p1-DR
            (addi x10 x10 1)
            (bne x10 x25 p1-DR-R)
            (subi x10 x10 1)
            (add x25 x0 x10)
            (add x10 x10 x27)
            (jal x0 p1-go)
        p1-DR-R
            (subi x25 x10 1)
            (jal x0 p1-go)

        p1-UR
            (addi x10 x10 1)
            (bne x10 x25 p1-DR-R)
            (subi x10 x10 1)
            (add x25 x0 x10)
            (sub x10 x10 x27)
            (jal x0 p1-go)
        p1-UR-R
            (subi x25 x10 1)
            (jal x0 p1-go)

    p1-done
        (srai x10 x26 1)
        (subi x2 x2 8)
        (sd x2 x1)
        (jal x1 write-int)
        (ld x1 x2)
        (addi x2 x2 8)
        (jalr x0 x1)

error-argc
    (addi x10 x0 -1)
    (addi x17 x0 SYS_EXIT)
    (ecall)
error-open
    (addi x10 x0 -2)
    (addi x17 x0 SYS_EXIT)
    (ecall)
error-read-input
    (addi x10 x0 -3)
    (addi x17 x0 SYS_EXIT)
    (ecall)

(include! "util.sasm")
(include! "malloc.sasm")
