(include! "syscalls.sasm")

start
    (jal x1 malloc-init)

    (lw x10 x2)
    (addi x11 x0 2)
    (bne x10 x11 error-argc)

    ;; Open input file
    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 AT_FDCWD)
    ;; argv[1]
    (ld x11 (+ x2 16))
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)

    ;; Read input file to buffer
    ;; mmap(NULL, 64k, PROT_READ, MAP_PRIVATE, fd, 0)
    (add x14 x0 x10)
    (add x10 x0 x0)
    (addi x11 x0 1)
    (slli x11 x11 26)
    (addi x12 x0 1)
    (addi x13 x0 2)
    (add x15 x0 x0)
    (addi x17 x0 SYS_MMAP)
    (ecall)
    (blt x10 x0 error-read-input)
    (beq x10 x0 error-read-input)

    (add x31 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    (add x10 x0 x31)
    (subi x2 x2 8)
    (sd x2 x10)

    (jal x1 p1)

    (ld x10 x2)
    (addi x2 x2 8)

    (jal x1 p2)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 SYS_EXIT)
    (ecall)

    p2
        (subi x2 x2 8)
        (sd x2 x1)

        ;; Sum
        (add x20 x0 x0)
        p2-loop
            ;; red max
            (add x22 x0 x0)
            ;; green max
            (add x23 x0 x0)
            ;; blue max
            (add x24 x0 x0)

            (lb x28 x10)
            (beq x28 x0 p2-done)
            ;; Skip over `Game `
            (addi x10 x10 5)
            (jal x1 atou)
            ;; Skip over `: `
            (addi x10 x10 2)
            p2-read-cube
            (jal x1 atou)
            (addi x10 x10 1)
            (lb x5 x10)
            (subi x6 x5 #'r')
            (beq x6 x0 p2-red)
            (subi x6 x5 #'g')
            (beq x6 x0 p2-green)
            p2-blue
                (addi x10 x10 4)
                (blt x11 x24 p2-after-cube)
                (add x24 x0 x11)
                (jal x0 p2-after-cube)
            p2-red
                (addi x10 x10 3)
                (blt x11 x22 p2-after-cube)
                (add x22 x0 x11)
                (jal x0 p2-after-cube)
            p2-green
                (addi x10 x10 5)
                (blt x11 x23 p2-after-cube)
                (add x23 x0 x11)
            p2-after-cube
                (lb x5 x10)
                (beq x5 x0 p2-good-game)
                (addi x10 x10 1)
                (subi x6 x5 #'\n')
                (beq x6 x0 p2-good-game)
                (addi x10 x10 1)
                (jal x0 p2-read-cube)
            p2-good-game
                (mul x5 x22 x23)
                (mul x5 x5 x24)
                (add x20 x20 x5)
                (jal x0 p2-loop)

        p2-done
            (add x10 x0 x20)
            (ld x1 x2)
            (addi x2 x2 8)
            (jal x0 write-uint)

    p1
        (subi x2 x2 8)
        (sd x2 x1)

        ;; Sum
        (add x20 x0 x0)
        p1-loop
            (lb x28 x10)
            (beq x28 x0 p1-done)
            ;; Skip over `Game `
            (addi x10 x10 5)
            (jal x1 atou)
            (add x21 x0 x11)
            ;; Skip over `: `
            (addi x10 x10 2)
            p1-read-cube
            (jal x1 atou)
            (addi x10 x10 1)
            (lb x5 x10)
            (subi x6 x5 #'r')
            (beq x6 x0 p1-red)
            (subi x6 x5 #'g')
            (beq x6 x0 p1-green)
            p1-blue
                (addi x10 x10 4)
                (subi x11 x11 15)
                (bge x11 x0 p1-skip-line)
                (jal x0 after-cube)
            p1-red
                (addi x10 x10 3)
                (subi x11 x11 13)
                (bge x11 x0 p1-skip-line)
                (jal x0 after-cube)
            p1-green
                (addi x10 x10 5)
                (subi x11 x11 14)
                (bge x11 x0 p1-skip-line)
            after-cube
                (lb x5 x10)
                (beq x5 x0 p1-good-game)
                (addi x10 x10 1)
                (subi x6 x5 #'\n')
                (beq x6 x0 p1-good-game)
                (addi x10 x10 1)
                (jal x0 p1-read-cube)
            p1-skip-line
                (lb x5 x10)
                (addi x10 x10 1)
                (beq x5 x0 p1-done)
                (subi x5 x5 #'\n')
                (beq x5 x0 p1-loop)
                (jal x0 p1-skip-line)
            p1-good-game
                (add x20 x20 x21)
                (jal x0 p1-loop)

        p1-done
            (add x10 x0 x20)
            (ld x1 x2)
            (addi x2 x2 8)
            (jal x0 write-uint)

    ;; INPUT:
    ;;  x10 - char*
    ;; OUTPUT:
    ;;  x10 - char* : incremented to character after this uint
    ;;  x11 - u64
    atou
        (add x11 x0 x0)
        (addi x5 x0 10)
        atou-loop
            (lb x6 x10)
            (subi x7 x6 #':')
            (bge x7 x0 atou-done)
            (subi x7 x6 #'0')
            (blt x7 x0 atou-done)
            (addi x10 x10 1)
            (mul x11 x11 x5)
            (add x11 x11 x7)
            (jal x0 atou-loop)
        atou-done
            (jalr x0 x1)

    ;; INPUT:
    ;;  x10 - u64
    write-uint
        (subi x2 x2 16)
        (sd x2 x1)
        (sd (+ x2 8) x10)

        (addi x10 x0 16)
        (jal x1 malloc)
        (add x11 x0 x10)

        (ld x1 x2)
        (ld x10 (+ x2 8))
        (addi x2 x2 16)


        (add x7 x0 x11)
        (add x12 x0 x0)
        (beq x10 x0 write-uint-zero)
        (addi x5 x0 10)
        itoa
            (beq x10 x0 rev)
            (rem x6 x10 x5)
            (div x10 x10 x5)
            (addi x6 x6 #'0')
            (sb x7 x6)
            (addi x7 x7 1)
            (addi x12 x12 1)
            (jal x0 itoa)
        rev
            (add x28 x0 x11)
            (subi x29 x7 1)
            rev-loop
                (bge x28 x29 write)
                (lb x30 x28)
                (lb x31 x29)
                (sb x28 x31)
                (sb x29 x30)
                (addi x28 x28 1)
                (subi x29 x29 1)
                (jal x0 rev-loop)
        write-uint-zero
            (addi x6 x0 #'0')
            (sb x7 x6)
            (addi x7 x7 1)
            (addi x12 x12 1)
        write
        (addi x5 x0 #'\n')
        (sb x7 x5)
        (addi x12 x12 1)
        ;; write(STDOUT, msg, len)
        (addi x10 x0 STDOUT)
        (addi x17 x0 SYS_WRITE)
        (ecall)

        (jalr x0 x1)

error-argc
    (addi x10 x0 -1)
    (addi x17 x0 SYS_EXIT)
    (ecall)
error-open
    (addi x10 x0 -2)
    (addi x17 x0 SYS_EXIT)
    (ecall)
error-read-input
    (addi x10 x0 -3)
    (addi x17 x0 SYS_EXIT)
    (ecall)

(include! "malloc.sasm")
