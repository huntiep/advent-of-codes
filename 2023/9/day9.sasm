(include! "syscalls.sasm")

start
    (jal x1 malloc-init)

    (lw x10 x2)
    (addi x11 x0 2)
    (bne x10 x11 error-argc)

    ;; Open input file
    ;; openat(AT_FDCWD, input-name, O_RDONLY, 0)
    (addi x10 x0 AT_FDCWD)
    ;; argv[1]
    (ld x11 (+ x2 16))
    (add x12 x0 x0)
    (add x13 x0 x0)
    (addi x17 x0 SYS_OPENAT)
    (ecall)
    (blt x10 x0 error-open)

    ;; Read input file to buffer
    ;; mmap(NULL, 64k, PROT_READ, MAP_PRIVATE, fd, 0)
    (add x14 x0 x10)
    (add x10 x0 x0)
    (addi x11 x0 1)
    (slli x11 x11 25)
    (addi x12 x0 1)
    (addi x13 x0 2)
    (add x15 x0 x0)
    (addi x17 x0 SYS_MMAP)
    (ecall)
    (blt x10 x0 error-read-input)
    (beq x10 x0 error-read-input)

    (add x31 x0 x10)

    ;; close(fd)
    (add x10 x0 x14)
    (addi x17 x0 SYS_CLOSE)
    (ecall)

    (add x10 x0 x31)
    (subi x2 x2 8)
    (sd x2 x10)

    (jal x1 p1)

    (ld x10 x2)
    (addi x2 x2 8)

    (jal x1 p2)

    ;; exit(0)
    (add x10 x0 x0)
    (addi x17 x0 SYS_EXIT)
    (ecall)

    p2
        (subi x2 x2 16)
        (sd x2 x10)
        (sd (+ x2 8) x1)
        (addi x10 x0 1)
        (slli x10 x10 16)
        (jal x1 malloc)
        (add x20 x0 x10)
        (add x21 x0 x10)
        (addi x10 x0 1024)
        (jal x1 malloc)
        (sd x20 x10)
        (sd (+ x20 8) x10)
        (addi x20 x20 16)
        (add x22 x0 x10)

        (add x27 x0 x0)
        (ld x10 x2)
        p2-read-loop
            (lb x5 x10)
            (beq x5 x0 p2-done)
            (jal x1 atoi)
            (sd x22 x11)
            (addi x22 x22 8)
            (lb x5 x10)
            (subi x5 x5 #'\n')
            (addi x10 x10 1)
            (bne x5 x0 p2-read-loop)
        (sd (- x20 16) x22)
        p2-loop
            (ld x22 (- x20 16))
            (ld x23 (- x20 8))
            (addi x23 x23 8)
            (sd x2 x10)
            (addi x10 x0 1024)
            (jal x1 malloc)
            (sd x20 x10)
            (sd (+ x20 8) x10)
            (addi x20 x20 16)
            (add x24 x0 x10)
            (ld x10 x2)
            p2-inner-loop
                (beq x23 x22 p2-eq)
                (ld x5 (- x23 8))
                (ld x6 x23)
                (addi x23 x23 8)
                (sub x6 x6 x5)
                (sd x24 x6)
                (addi x24 x24 8)
                (jal x0 p2-inner-loop)
            p2-eq
                (sd (- x20 16) x24)
                (bne x6 x0 p2-loop)
        p2-finish-sequence
            (subi x20 x20 32)
            (ld x6 (+ x20 8))
            (ld x5 x6)
        p2-finish-sequence-loop
            (beq x20 x21 p2-after)
            (subi x20 x20 16)
            (ld x6 (+ x20 8))
            (ld x6 x6)
            (sub x5 x6 x5)
            (jal x0 p2-finish-sequence-loop)
        p2-after
            (add x27 x27 x5)
            (ld x22 (+ x20 8))
            (addi x20 x20 16)
            (jal x0 p2-read-loop)

    p2-done
        (add x20 x0 x21)
        (ld x10 (+ x20 8))
        p2-done-free
            (jal x1 free)
            (addi x20 x20 16)
            (ld x10 (+ x20 8))
            (bne x10 x0 p2-done-free)
        (add x10 x0 x21)
        (jal x1 free)
        (add x10 x0 x27)
        (jal x1 write-int)
        (ld x1 (+ x2 8))
        (addi x2 x2 16)
        (jalr x0 x1)


    p1
        (subi x2 x2 16)
        (sd x2 x10)
        (sd (+ x2 8) x1)
        (addi x10 x0 1)
        (slli x10 x10 16)
        (jal x1 malloc)
        (add x20 x0 x10)
        (add x21 x0 x10)
        (addi x10 x0 1024)
        (jal x1 malloc)
        (sd x20 x10)
        (sd (+ x20 8) x10)
        (addi x20 x20 16)
        (add x22 x0 x10)

        (add x27 x0 x0)
        (ld x10 x2)
        p1-read-loop
            (lb x5 x10)
            (beq x5 x0 p1-done)
            (jal x1 atoi)
            (sd x22 x11)
            (addi x22 x22 8)
            (lb x5 x10)
            (subi x5 x5 #'\n')
            (addi x10 x10 1)
            (bne x5 x0 p1-read-loop)
        (sd (- x20 16) x22)
        p1-loop
            (ld x22 (- x20 16))
            (ld x23 (- x20 8))
            (addi x23 x23 8)
            (sd x2 x10)
            (addi x10 x0 1024)
            (jal x1 malloc)
            (sd x20 x10)
            (sd (+ x20 8) x10)
            (addi x20 x20 16)
            (add x24 x0 x10)
            (ld x10 x2)
            p1-inner-loop
                (beq x23 x22 p1-eq)
                (ld x5 (- x23 8))
                (ld x6 x23)
                (addi x23 x23 8)
                (sub x6 x6 x5)
                (sd x24 x6)
                (addi x24 x24 8)
                (jal x0 p1-inner-loop)
            p1-eq
                (sd (- x20 16) x24)
                (bne x6 x0 p1-loop)
        p1-finish-sequence
            (add x5 x0 x0)
        p1-finish-sequence-loop
            (beq x20 x21 p1-after)
            (subi x20 x20 16)
            (ld x6 x20)
            (ld x6 (- x6 8))
            (add x5 x5 x6)
            (jal x0 p1-finish-sequence-loop)
        p1-after
            (add x27 x27 x5)
            (ld x22 (+ x20 8))
            (addi x20 x20 16)
            (jal x0 p1-read-loop)

    p1-done
        (add x20 x0 x21)
        (ld x10 (+ x20 8))
        p1-done-free
            (jal x1 free)
            (addi x20 x20 16)
            (ld x10 (+ x20 8))
            (bne x10 x0 p1-done-free)
        (add x10 x0 x21)
        (jal x1 free)
        (add x10 x0 x27)
        (jal x1 write-int)
        (ld x1 (+ x2 8))
        (addi x2 x2 16)
        (jalr x0 x1)

error-argc
    (addi x10 x0 -1)
    (addi x17 x0 SYS_EXIT)
    (ecall)
error-open
    (addi x10 x0 -2)
    (addi x17 x0 SYS_EXIT)
    (ecall)
error-read-input
    (addi x10 x0 -3)
    (addi x17 x0 SYS_EXIT)
    (ecall)

(include! "util.sasm")
(include! "malloc.sasm")
